model{
	
	  ###################################
    # Fundamentals Model
    
      ### Dirichlet Regression for election e
      for(l in 1:LA) {
         v[ind[l,1]:ind[l,2]] ~ ddirch(a[ind[l,1]:ind[l,2]])
      }
  
      ### Define Model 
      for(i in 1:N){
          log(a[i]) <- b0[election[i]] + inprod(b[election[i],], x[i,])
      }
  
       # transition model (random walk priors for b0)
      for (j in 2:L) {
          mu.b0[j] <- b0_prior[j-1] + drift.b0
          b0[j] ~ dnorm(mu.b0[j], tau.b0)
      }

       # priors for transition model, b0
        b0[1] ~ dnorm(b0_prior[1], 0.01) # initialization
        drift.b0 ~ dnorm(0, 0.01)
        tau.b0 ~ dgamma(1.0E-1, 1.0E-1)
        sigma.b0 <- 1.0/sqrt(tau.b0) 
  
       # transition model (random walk priors for b's)
        for (k in 1:K) { 
          for (j in 2:L) {
            mu.b[j,k] <- b_prior[j-1,k] + drift[k]
            b[j,k] ~ dnorm(mu.b[j,k], tau.b[k])
          }
        }
      
      # priors for transition model, b's
        for(k in 1:K) {
        b[1,k] ~ dnorm(b_prior[1,k], 0.01) # initialization
        drift[k] ~ dnorm(0, 0.01)
        tau.b[k] ~ dgamma(1.0E-1, 1.0E-1)
        sigma.b[k] <- 1.0/sqrt(tau.b[k]) 
        }
      



      ### Forecast upcoming elections
      for (j in 1:(nParties)) {
        log(a_pred[j]) <-  b0[L] + inprod(b[L,], xE[j,])
      }
      
      vE[1:nParties] ~ ddirch(a_pred)
    	
    	
    #####################################
    # Set Forecast as Prior of Dynamic Model
    
      ### Transform Forecast log-ratio
      for (j in 1:(nParties)) {
    		alphastar[nPeriods,j] <- log(vE[j]/vE[nParties])
    	}	
		

		###################################
		# Dynamic Poll Model
		
  		### Backward-Random-Walk # change to nPeriods -1 if jump "after electionday"
  		for (i in 1:(nPeriods-1)) {
  			alphastar[i,nParties] <- 0
  			alphastar[i,1:(nParties-1)] ~ dmnorm(alphastar[i+1,1:(nParties-1)], iS[,])
  		}
  		
  		### Last Day Additional Jump (informative prior on evolution variance) before election
  		#alphastar[(nPeriods-1),nParties] <- 0
  		#alphastar[(nPeriods-1),1:(nParties-1)] ~ dmnorm(alphastar[nPeriods,1:(nParties-1)], iS_shock[,])
      
      ### Last Day Additional Jump (informative prior on evolution variance) past last poll
      alphastarforecast[nParties] <- 0
      alphastarforecast[1:(nParties-1)] ~ dmnorm(alphastar[nPeriods, 1:(nParties-1)], iS_shock[,])

  	  ### Transform to Shares
  		for (i in 1:(nPeriods)) {
  			for (j in 1:(nParties)) {
  			  ea[i,j] <- exp(alphastar[i,j])
        	alpha[i,j] <- ea[i,j]/sum(ea[i,])
  		}}
  		
      ### Transform Forecast to Shares jump after electionday
      for (j in 1:(nParties)) {
      
      ef[j] <- exp(alphastarforecast[j])
      forecast[j] <- ef[j]/sum(ef[])
      }

      ### Transform Forecast to Shares jump before electionday
      #for (j in 1:(nParties)) {
      #
      #ef[j] <- exp(alphastar[nPeriods,j])
      #forecast[j] <- ef[j]/sum(ef[])
      #}

  		### Likelihood Model
  		for (k in 1:nPolls) {
  			y[k,1:nParties] ~ dmulti(alpha[date[k],] + house_effect[iid[k],]  , size[k])
  		}
  		
  		### Evolution Variance Prior
  		iS ~ dwish(R0[,], n0)
  		S <- inverse(iS[,])

      ### Evolution Variance Prior Shock based on additional needed variance between polls and elections results
      iS_shock ~ dwish(shock[,], n_shock)
      S_shock <- inverse(iS_shock[,])
  		
  		### House Effects Prior 
  		for (j in 2:(nParties)) {
  		  for (c in 2:nInst){
  		    house_effect[c, j] ~ dnorm(0, 1) # Prior prior 1 percent point sd
         }}
  
      ### House Effects Zero-Sum Contraint; Both Parties and Institutes
  		for (j in 2:nParties) {
          house_effect[1, j] <- 0 - sum(house_effect[2:nInst, j])
      }
      
      for(c in 1:nInst) { 
          house_effect[c, 1] <- 0 - sum(house_effect[c, 2:nParties] )
      }
    

	}